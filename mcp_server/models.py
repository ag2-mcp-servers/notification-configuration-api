# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:06:58+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class DeleteNotificationConfigurationRequest(BaseModel):
    notificationIds: List[int] = Field(
        ...,
        description='A list of IDs of the notification subscription configurations to be deleted.',
    )


class EmptyRequest(BaseModel):
    pass


class ExchangeMessage(BaseModel):
    messageCode: Optional[str] = None
    messageDescription: Optional[str] = None


class FieldName(Enum):
    accountCode = 'accountCode'
    accountHolderCode = 'accountHolderCode'
    accountHolderDetails = 'accountHolderDetails'
    accountNumber = 'accountNumber'
    accountStateType = 'accountStateType'
    accountStatus = 'accountStatus'
    accountType = 'accountType'
    address = 'address'
    balanceAccount = 'balanceAccount'
    balanceAccountActive = 'balanceAccountActive'
    balanceAccountCode = 'balanceAccountCode'
    balanceAccountId = 'balanceAccountId'
    bankAccount = 'bankAccount'
    bankAccountCode = 'bankAccountCode'
    bankAccountName = 'bankAccountName'
    bankAccountUUID = 'bankAccountUUID'
    bankBicSwift = 'bankBicSwift'
    bankCity = 'bankCity'
    bankCode = 'bankCode'
    bankName = 'bankName'
    bankStatement = 'bankStatement'
    branchCode = 'branchCode'
    businessContact = 'businessContact'
    cardToken = 'cardToken'
    checkCode = 'checkCode'
    city = 'city'
    companyRegistration = 'companyRegistration'
    constitutionalDocument = 'constitutionalDocument'
    controller = 'controller'
    country = 'country'
    countryCode = 'countryCode'
    currency = 'currency'
    currencyCode = 'currencyCode'
    dateOfBirth = 'dateOfBirth'
    description = 'description'
    destinationAccountCode = 'destinationAccountCode'
    document = 'document'
    documentContent = 'documentContent'
    documentExpirationDate = 'documentExpirationDate'
    documentIssuerCountry = 'documentIssuerCountry'
    documentIssuerState = 'documentIssuerState'
    documentName = 'documentName'
    documentNumber = 'documentNumber'
    documentType = 'documentType'
    doingBusinessAs = 'doingBusinessAs'
    drivingLicence = 'drivingLicence'
    drivingLicenceBack = 'drivingLicenceBack'
    drivingLicenceFront = 'drivingLicenceFront'
    drivingLicense = 'drivingLicense'
    email = 'email'
    firstName = 'firstName'
    formType = 'formType'
    fullPhoneNumber = 'fullPhoneNumber'
    gender = 'gender'
    hopWebserviceUser = 'hopWebserviceUser'
    houseNumberOrName = 'houseNumberOrName'
    iban = 'iban'
    idCard = 'idCard'
    idCardBack = 'idCardBack'
    idCardFront = 'idCardFront'
    idNumber = 'idNumber'
    identityDocument = 'identityDocument'
    individualDetails = 'individualDetails'
    infix = 'infix'
    jobTitle = 'jobTitle'
    lastName = 'lastName'
    lastReviewDate = 'lastReviewDate'
    legalArrangement = 'legalArrangement'
    legalArrangementCode = 'legalArrangementCode'
    legalArrangementEntity = 'legalArrangementEntity'
    legalArrangementEntityCode = 'legalArrangementEntityCode'
    legalArrangementLegalForm = 'legalArrangementLegalForm'
    legalArrangementMember = 'legalArrangementMember'
    legalArrangementMembers = 'legalArrangementMembers'
    legalArrangementName = 'legalArrangementName'
    legalArrangementReference = 'legalArrangementReference'
    legalArrangementRegistrationNumber = 'legalArrangementRegistrationNumber'
    legalArrangementTaxNumber = 'legalArrangementTaxNumber'
    legalArrangementType = 'legalArrangementType'
    legalBusinessName = 'legalBusinessName'
    legalEntity = 'legalEntity'
    legalEntityType = 'legalEntityType'
    logo = 'logo'
    merchantAccount = 'merchantAccount'
    merchantCategoryCode = 'merchantCategoryCode'
    merchantHouseNumber = 'merchantHouseNumber'
    merchantReference = 'merchantReference'
    microDeposit = 'microDeposit'
    name = 'name'
    nationality = 'nationality'
    originalReference = 'originalReference'
    ownerCity = 'ownerCity'
    ownerCountryCode = 'ownerCountryCode'
    ownerDateOfBirth = 'ownerDateOfBirth'
    ownerHouseNumberOrName = 'ownerHouseNumberOrName'
    ownerName = 'ownerName'
    ownerPostalCode = 'ownerPostalCode'
    ownerState = 'ownerState'
    ownerStreet = 'ownerStreet'
    passport = 'passport'
    passportNumber = 'passportNumber'
    payoutMethodCode = 'payoutMethodCode'
    payoutSchedule = 'payoutSchedule'
    pciSelfAssessment = 'pciSelfAssessment'
    personalData = 'personalData'
    phoneCountryCode = 'phoneCountryCode'
    phoneNumber = 'phoneNumber'
    postalCode = 'postalCode'
    primaryCurrency = 'primaryCurrency'
    reason = 'reason'
    registrationNumber = 'registrationNumber'
    returnUrl = 'returnUrl'
    schedule = 'schedule'
    shareholder = 'shareholder'
    shareholderCode = 'shareholderCode'
    shareholderCodeAndSignatoryCode = 'shareholderCodeAndSignatoryCode'
    shareholderCodeOrSignatoryCode = 'shareholderCodeOrSignatoryCode'
    shareholderType = 'shareholderType'
    shareholderTypes = 'shareholderTypes'
    shopperInteraction = 'shopperInteraction'
    signatory = 'signatory'
    signatoryCode = 'signatoryCode'
    socialSecurityNumber = 'socialSecurityNumber'
    sourceAccountCode = 'sourceAccountCode'
    splitAccount = 'splitAccount'
    splitConfigurationUUID = 'splitConfigurationUUID'
    splitCurrency = 'splitCurrency'
    splitValue = 'splitValue'
    splits = 'splits'
    stateOrProvince = 'stateOrProvince'
    status = 'status'
    stockExchange = 'stockExchange'
    stockNumber = 'stockNumber'
    stockTicker = 'stockTicker'
    store = 'store'
    storeDetail = 'storeDetail'
    storeName = 'storeName'
    storeReference = 'storeReference'
    street = 'street'
    taxId = 'taxId'
    tier = 'tier'
    tierNumber = 'tierNumber'
    transferCode = 'transferCode'
    ultimateParentCompany = 'ultimateParentCompany'
    ultimateParentCompanyAddressDetails = 'ultimateParentCompanyAddressDetails'
    ultimateParentCompanyAddressDetailsCountry = (
        'ultimateParentCompanyAddressDetailsCountry'
    )
    ultimateParentCompanyBusinessDetails = 'ultimateParentCompanyBusinessDetails'
    ultimateParentCompanyBusinessDetailsLegalBusinessName = (
        'ultimateParentCompanyBusinessDetailsLegalBusinessName'
    )
    ultimateParentCompanyBusinessDetailsRegistrationNumber = (
        'ultimateParentCompanyBusinessDetailsRegistrationNumber'
    )
    ultimateParentCompanyCode = 'ultimateParentCompanyCode'
    ultimateParentCompanyStockExchange = 'ultimateParentCompanyStockExchange'
    ultimateParentCompanyStockNumber = 'ultimateParentCompanyStockNumber'
    ultimateParentCompanyStockNumberOrStockTicker = (
        'ultimateParentCompanyStockNumberOrStockTicker'
    )
    ultimateParentCompanyStockTicker = 'ultimateParentCompanyStockTicker'
    unknown = 'unknown'
    value = 'value'
    verificationType = 'verificationType'
    virtualAccount = 'virtualAccount'
    visaNumber = 'visaNumber'
    webAddress = 'webAddress'
    year = 'year'


class FieldType(BaseModel):
    field: Optional[str] = Field(None, description='The full name of the property.')
    fieldName: Optional[FieldName] = Field(None, description='The type of the field.')
    shareholderCode: Optional[str] = Field(
        None,
        description='The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.',
    )


class GetNotificationConfigurationRequest(BaseModel):
    notificationId: int = Field(
        ...,
        description='The ID of the notification subscription configuration whose details are to be retrieved.',
    )


class SslProtocol(Enum):
    TLSv12 = 'TLSv12'
    TLSv13 = 'TLSv13'


class EventType(Enum):
    ACCOUNT_CLOSED = 'ACCOUNT_CLOSED'
    ACCOUNT_CREATED = 'ACCOUNT_CREATED'
    ACCOUNT_FUNDS_BELOW_THRESHOLD = 'ACCOUNT_FUNDS_BELOW_THRESHOLD'
    ACCOUNT_HOLDER_CREATED = 'ACCOUNT_HOLDER_CREATED'
    ACCOUNT_HOLDER_LIMIT_REACHED = 'ACCOUNT_HOLDER_LIMIT_REACHED'
    ACCOUNT_HOLDER_MIGRATED = 'ACCOUNT_HOLDER_MIGRATED'
    ACCOUNT_HOLDER_PAYOUT = 'ACCOUNT_HOLDER_PAYOUT'
    ACCOUNT_HOLDER_STATUS_CHANGE = 'ACCOUNT_HOLDER_STATUS_CHANGE'
    ACCOUNT_HOLDER_STORE_STATUS_CHANGE = 'ACCOUNT_HOLDER_STORE_STATUS_CHANGE'
    ACCOUNT_HOLDER_UPCOMING_DEADLINE = 'ACCOUNT_HOLDER_UPCOMING_DEADLINE'
    ACCOUNT_HOLDER_UPDATED = 'ACCOUNT_HOLDER_UPDATED'
    ACCOUNT_HOLDER_VERIFICATION = 'ACCOUNT_HOLDER_VERIFICATION'
    ACCOUNT_UPDATED = 'ACCOUNT_UPDATED'
    BENEFICIARY_SETUP = 'BENEFICIARY_SETUP'
    COMPENSATE_NEGATIVE_BALANCE = 'COMPENSATE_NEGATIVE_BALANCE'
    DIRECT_DEBIT_INITIATED = 'DIRECT_DEBIT_INITIATED'
    FUNDS_MIGRATED = 'FUNDS_MIGRATED'
    PAYMENT_FAILURE = 'PAYMENT_FAILURE'
    PENDING_CREDIT = 'PENDING_CREDIT'
    REFUND_FUNDS_TRANSFER = 'REFUND_FUNDS_TRANSFER'
    REPORT_AVAILABLE = 'REPORT_AVAILABLE'
    SCHEDULED_REFUNDS = 'SCHEDULED_REFUNDS'
    SCORE_SIGNAL_TRIGGERED = 'SCORE_SIGNAL_TRIGGERED'
    TRANSFER_FUNDS = 'TRANSFER_FUNDS'
    TRANSFER_NOT_PAIDOUT_TRANSFERS = 'TRANSFER_NOT_PAIDOUT_TRANSFERS'


class IncludeMode(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class NotificationEventConfiguration(BaseModel):
    eventType: EventType = Field(
        ...,
        description='The type of event.\n\nPossible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.',
    )
    includeMode: IncludeMode = Field(
        ...,
        description='Indicates whether the specified `eventType` is sent to your webhook endpoint.\nPossible values:\n* **INCLUDE**: Send the specified `eventType`.\n* **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.',
    )


class ServiceError(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class TestNotificationConfigurationRequest(BaseModel):
    eventTypes: Optional[List[EventType]] = Field(
        None,
        description='The event types to test.  If left blank, then all of the configured event types will be tested.\n>Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.',
    )
    notificationId: int = Field(
        ...,
        description='The ID of the notification subscription configuration to be tested.',
    )


class ErrorFieldType(BaseModel):
    errorCode: Optional[int] = Field(None, description='The validation error code.')
    errorDescription: Optional[str] = Field(
        None, description='A description of the validation error.'
    )
    fieldType: Optional[FieldType] = Field(None, description='The type of error field.')


class GenericResponse(BaseModel):
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None,
        description='Contains field validation errors that would prevent requests from being processed.',
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')


class NotificationConfigurationDetails(BaseModel):
    active: Optional[bool] = Field(
        None, description='Indicates whether the notification subscription is active.'
    )
    apiVersion: Optional[int] = Field(
        None,
        description="The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.",
    )
    description: Optional[str] = Field(
        None,
        description='A description of the notification subscription configuration.',
    )
    eventConfigs: Optional[List[NotificationEventConfiguration]] = Field(
        None,
        description='Contains objects that define event types and their subscription settings.',
    )
    hmacSignatureKey: Optional[str] = Field(
        None,
        description='A string with which to salt the notification(s) before hashing. If this field is provided, a hash value will be included under the notification header `HmacSignature` and the hash protocol will be included under the notification header `Protocol`. A notification body along with its `hmacSignatureKey` and `Protocol` can be used to calculate a hash value; matching this hash value with the `HmacSignature` will ensure that the notification body has not been tampered with or corrupted.\n\n>Must be a 32-byte hex-encoded string (i.e. a string containing 64 hexadecimal characters; e.g. "b0ea55c2fe60d4d1d605e9c385e0e7f7e6cafbb939ce07010f31a327a0871f27").\n\nThe omission of this field will preclude the provision of the `HmacSignature` and `Protocol` headers in notification(s).',
    )
    notificationId: Optional[int] = Field(
        None,
        description='Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).',
    )
    notifyPassword: Optional[str] = Field(
        None,
        description='The password to use when accessing the notifyURL with the specified username.',
    )
    notifyURL: Optional[str] = Field(
        None, description='The URL to which the notifications are to be sent.'
    )
    notifyUsername: Optional[str] = Field(
        None, description='The username to use when accessing the notifyURL.'
    )
    sslProtocol: Optional[SslProtocol] = Field(
        None,
        description='The SSL protocol employed by the endpoint.\n>Permitted values: `TLSv12`, `TLSv13`.',
    )


class TestNotificationConfigurationResponse(BaseModel):
    errorMessages: Optional[List[str]] = Field(
        None, description='Any error messages encountered.'
    )
    eventTypes: Optional[List[EventType]] = Field(
        None,
        description='The event types that were tested.\n>Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.',
    )
    exchangeMessages: Optional[List[ExchangeMessage]] = Field(
        None, description='The notification message and related response messages.'
    )
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None,
        description='Contains field validation errors that would prevent requests from being processed.',
    )
    notificationId: int = Field(
        ..., description='The ID of the notification subscription configuration.'
    )
    okMessages: Optional[List[str]] = Field(
        None, description='A list of messages describing the testing steps.'
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')


class UpdateNotificationConfigurationRequest(BaseModel):
    configurationDetails: NotificationConfigurationDetails = Field(
        ...,
        description='Details of the notification subscription configuration to be updated.',
    )


class CreateNotificationConfigurationRequest(BaseModel):
    configurationDetails: NotificationConfigurationDetails = Field(
        ...,
        description='Details of the prospective notification subscription configuration.',
    )


class GetNotificationConfigurationListResponse(BaseModel):
    configurations: Optional[List[NotificationConfigurationDetails]] = Field(
        None, description='Details of the notification subscription configurations.'
    )
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None,
        description='Contains field validation errors that would prevent requests from being processed.',
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')


class GetNotificationConfigurationResponse(BaseModel):
    configurationDetails: NotificationConfigurationDetails = Field(
        ..., description='Details of the notification subscription configuration.'
    )
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None,
        description='Contains field validation errors that would prevent requests from being processed.',
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')

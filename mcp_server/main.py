# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:06:58+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic

from models import (
    CreateNotificationConfigurationRequest,
    DeleteNotificationConfigurationRequest,
    EmptyRequest,
    GenericResponse,
    GetNotificationConfigurationListResponse,
    GetNotificationConfigurationRequest,
    GetNotificationConfigurationResponse,
    ServiceError,
    TestNotificationConfigurationRequest,
    TestNotificationConfigurationResponse,
    UpdateNotificationConfigurationRequest,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.\n\nThe Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a verification check or a payout has been completed.\n\nFor more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).\n## Authentication\nYour Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: YOUR_API_KEY" \\\n...\n```\n\nAlternatively, you can use the username and password to connect to the API using basic authentication. For example:\n\n```\ncurl\n-U "ws@MarketPlace.YOUR_PLATFORM_ACCOUNT":"YOUR_WS_PASSWORD" \\\n-H "Content-Type: application/json" \\\n...\n```\nWhen going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nThe Notification Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://cal-test.adyen.com/cal/services/Notification/v6/createNotificationConfiguration\n```',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Notification Configuration API',
    version='6',
    servers=[{'url': 'https://cal-test.adyen.com/cal/services/Notification/v6'}],
)


@app.post(
    '/createNotificationConfiguration',
    description=""" Creates a subscription to notifications informing you of events on your platform. After the subscription is created, the events specified in the configuration will be sent to the URL specified in the configuration. Subscriptions must be configured on a per-event basis (as opposed to, for example, a per-account holder basis), so all event notifications of a marketplace and of a given type will be sent to the same endpoint(s). A marketplace may have multiple endpoints if desired; an event notification may be sent to as many or as few different endpoints as configured. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_create_notification_configuration(
    body: CreateNotificationConfigurationRequest = None,
):
    """
    Subscribe to notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/deleteNotificationConfigurations',
    description=""" Deletes an existing notification subscription configuration. After the subscription is deleted, no further event notifications will be sent to the URL defined in the subscription. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_delete_notification_configurations(
    body: DeleteNotificationConfigurationRequest = None,
):
    """
    Delete a notification subscription configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getNotificationConfiguration',
    description=""" Returns the details of the configuration of a notification subscription. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_get_notification_configuration(
    body: GetNotificationConfigurationRequest = None,
):
    """
    Get a notification subscription configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getNotificationConfigurationList',
    description=""" Returns the details of the configurations of all of the notification subscriptions in the platform of the executing user. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_get_notification_configuration_list(body: EmptyRequest = None):
    """
    Get a list of notification subscription configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testNotificationConfiguration',
    description=""" Tests an existing notification subscription configuration. For each event type specified, a test notification will be generated and sent to the URL configured in the subscription specified. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_test_notification_configuration(
    body: TestNotificationConfigurationRequest = None,
):
    """
    Test a notification configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/updateNotificationConfiguration',
    description=""" Updates an existing notification subscription configuration. If you are updating the event types, you must provide all event types, otherwise the previous event type configuration will be overwritten. """,
    tags=['notification_subscription_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_update_notification_configuration(
    body: UpdateNotificationConfigurationRequest = None,
):
    """
    Update a notification subscription configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
